{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kiko/Desktop/REACT COMPLETE GUIDE*******/react-nextJS-meetup-project/pages/index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { GetStaticProps } from \"next\";\nimport { MongoClient } from \"mongodb\"; // const DUMMY_LIST = [\n//   {\n//     id: \"m1\",\n//     title: \"A first meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n//   {\n//     id: \"m2\",\n//     title: \"A second meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n//   {\n//     id: \"m3\",\n//     title: \"A third meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n//   {\n//     id: \"m4\",\n//     title: \"A fourth meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n// ];\n\nfunction Homepage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n\nexport async function getStaticProps() {\n  // fetch data from database\n  const client = await MongoClient.connect(\"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); //  this is name of collection\n  // finds all documents in collections\n\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => {\n        return {\n          title: meetup.title,\n          address: meetup.address,\n          image: meetup.image,\n          id: meetup._id.toString() //need to do this .map to transform the value of the _id Mongodb attaches to each document when they are made, into a string (we will get an error otherwise)\n\n        };\n      })\n    }\n  };\n}\nexport default Homepage;","map":{"version":3,"sources":["/Users/kiko/Desktop/REACT COMPLETE GUIDE*******/react-nextJS-meetup-project/pages/index.js"],"names":["MeetupList","GetStaticProps","MongoClient","Homepage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,SAASC,WAAT,QAA4B,SAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AAEA,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CACnB,iHADmB,CAC+F;AAD/F,GAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CATqC,CAUrC;AAEA;;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,IAAY;AAC/B,eAAO;AACLC,UAAAA,KAAK,EAAED,MAAM,CAACC,KADT;AAELC,UAAAA,OAAO,EAAEF,MAAM,CAACE,OAFX;AAGLC,UAAAA,KAAK,EAAEH,MAAM,CAACG,KAHT;AAILC,UAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX,EAJC,CAIsB;;AAJtB,SAAP;AAMD,OAPQ;AADJ;AADF,GAAP;AAYD;AAED,eAAenB,QAAf","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\nimport { GetStaticProps } from \"next\";\nimport { MongoClient } from \"mongodb\";\n\n// const DUMMY_LIST = [\n//   {\n//     id: \"m1\",\n//     title: \"A first meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n//   {\n//     id: \"m2\",\n//     title: \"A second meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n//   {\n//     id: \"m3\",\n//     title: \"A third meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n//   {\n//     id: \"m4\",\n//     title: \"A fourth meetup\",\n//     image:\n//       \"https://lp-cms-production.imgix.net/image_browser/Amsterdam%20canal%20tour%20boats.jpg\",\n//     address: \"some address, 12345 Some City\",\n//     description: \"this is a first meetup!\",\n//   },\n// ];\n\nfunction Homepage(props) {\n  return <MeetupList meetups={props.meetups} />;\n}\n\nexport async function getStaticProps() {\n  // fetch data from database\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n  //  this is name of collection\n\n  // finds all documents in collections\n  const meetups = await meetupsCollection.find().toArray();\n\n  client.close();\n\n  return {\n    props: {\n      meetups: meetups.map((meetup) => {\n        return {\n          title: meetup.title,\n          address: meetup.address,\n          image: meetup.image,\n          id: meetup._id.toString(), //need to do this .map to transform the value of the _id Mongodb attaches to each document when they are made, into a string (we will get an error otherwise)\n        };\n      }),\n    },\n  };\n}\n\nexport default Homepage;\n"]},"metadata":{},"sourceType":"module"}