{"ast":null,"code":"// API routes:\n// locating this file (new-meetup.js) inside this special \"api\" folder inside \"pages\" -- can use Next JS API routes feature -- to create our own \"back-end\" API route.\n// i.e. in other parts of our app, we will be able to send requests to domain.com/api/new-meetup, and then Next will trigger the function inside this file (typically called 'handler').\n// because API routes will only run on the server\n// never on the client.\n// Decoding them will never be exposed to the client.\n// So we can also use credentials\n// in API routes without compromising them.\nimport { MongoClient } from \"mongodb\";\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    const data = req.body;\n    const client = await MongoClient.connect(\"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // meetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n    );\n    const db = client.db();\n    const meetupsCollection = db.collection(\"meetups\");\n    const result = await meetupsCollection.insertOne(data); //asynv\n\n    console.log(result); //ex. output:\n    // {\n    //         acknowledged: true,\n    //         insertedId: new ObjectId(\"6336203a986a103d25995f19\")\n    //   }\n\n    client.close();\n    res.status(201).json({\n      message: \"Meetup inserted!\"\n    }); // adds a status code of 201 and message to the response object\n  }\n} //   ultimately, we also need to send back a response then.\n// And we do this with this response object.\n// Now, this works similar to what you might be used to\n// from Node Express.\n// You have a status method,\n// which you can call on response\n// to set a HTTP status code\n// of the response which will be returned.\n// For example, a 201 status code\n// to indicate that something was inserted successfully.\n// You can then chain a JSON call here\n// to prepare the JSON data that will be added\n// to the outgoing response.\n// And here we could, for example, add a message key\n// where we say Meetup inserted!\n// // Max code\n// import { MongoClient } from \"mongodb\";\n// // /api/new-meetup\n// // POST /api/new-meetup\n// async function handler(req, res) {\n//   if (req.method === \"POST\") {\n//     const data = req.body;\n//     const client = await MongoClient.connect(\n//       \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\"\n//     );\n//     const db = client.db();\n//     const meetupsCollection = db.collection(\"meetups\");\n//     const result = await meetupsCollection.insertOne(data);\n//     console.log(result);\n//     client.close();\n//     res.status(201).json({ message: \"Meetup inserted!\" });\n//   }\n// }\n// export default handler;","map":{"version":3,"sources":["/Users/kiko/Desktop/REACT COMPLETE GUIDE*******/react-nextJS-meetup-project/pages/api/new-meetup.js"],"names":["MongoClient","handler","req","res","method","data","body","client","connect","db","meetupsCollection","collection","result","insertOne","console","log","close","status","json","message"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CACnB,iHADmB,CAC+F;AAD/F,KAArB;AAIA,UAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,UAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,UAAMC,MAAM,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4BR,IAA5B,CAArB,CAXyB,CAW+B;;AAExDS,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAbyB,CAczB;AACA;AACA;AACA;AACA;;AAEAL,IAAAA,MAAM,CAACS,KAAP;AAEAb,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,EAtByB,CAsB8B;AACxD;AACF,C,CAED;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA","sourcesContent":["// API routes:\n// locating this file (new-meetup.js) inside this special \"api\" folder inside \"pages\" -- can use Next JS API routes feature -- to create our own \"back-end\" API route.\n\n// i.e. in other parts of our app, we will be able to send requests to domain.com/api/new-meetup, and then Next will trigger the function inside this file (typically called 'handler').\n\n// because API routes will only run on the server\n// never on the client.\n// Decoding them will never be exposed to the client.\n// So we can also use credentials\n// in API routes without compromising them.\n\nimport { MongoClient } from \"mongodb\";\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    const data = req.body;\n\n    const client = await MongoClient.connect(\n      \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // meetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection(\"meetups\");\n\n    const result = await meetupsCollection.insertOne(data); //asynv\n\n    console.log(result);\n    //ex. output:\n    // {\n    //         acknowledged: true,\n    //         insertedId: new ObjectId(\"6336203a986a103d25995f19\")\n    //   }\n\n    client.close();\n\n    res.status(201).json({ message: \"Meetup inserted!\" }); // adds a status code of 201 and message to the response object\n  }\n}\n\n//   ultimately, we also need to send back a response then.\n\n// And we do this with this response object.\n\n// Now, this works similar to what you might be used to\n\n// from Node Express.\n\n// You have a status method,\n\n// which you can call on response\n\n// to set a HTTP status code\n\n// of the response which will be returned.\n\n// For example, a 201 status code\n\n// to indicate that something was inserted successfully.\n\n// You can then chain a JSON call here\n\n// to prepare the JSON data that will be added\n\n// to the outgoing response.\n\n// And here we could, for example, add a message key\n\n// where we say Meetup inserted!\n\n// // Max code\n\n// import { MongoClient } from \"mongodb\";\n\n// // /api/new-meetup\n// // POST /api/new-meetup\n\n// async function handler(req, res) {\n//   if (req.method === \"POST\") {\n//     const data = req.body;\n\n//     const client = await MongoClient.connect(\n//       \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\"\n//     );\n//     const db = client.db();\n\n//     const meetupsCollection = db.collection(\"meetups\");\n\n//     const result = await meetupsCollection.insertOne(data);\n\n//     console.log(result);\n\n//     client.close();\n\n//     res.status(201).json({ message: \"Meetup inserted!\" });\n//   }\n// }\n\n// export default handler;\n"]},"metadata":{},"sourceType":"module"}