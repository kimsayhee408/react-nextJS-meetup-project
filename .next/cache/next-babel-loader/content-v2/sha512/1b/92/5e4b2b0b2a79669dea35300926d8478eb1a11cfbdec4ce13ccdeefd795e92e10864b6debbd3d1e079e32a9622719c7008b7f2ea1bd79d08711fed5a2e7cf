{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kiko/Desktop/REACT COMPLETE GUIDE*******/react-nextJS-meetup-project/pages/[meetupId]/index.js\";\nimport { GetStaticProps } from \"next\";\nimport { GetStaticPaths } from \"next\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { useRouter } from \"next/router\";\nimport { MongoClient } from \"mongodb\";\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); //  this is name of collection\n  // finds all documents from collection but just the _id field for each document\n\n  const meetupsIDs = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    // means we have listed all supported paths are below.\n    paths: meetupsIDs.map(id => ({\n      params: {\n        meetupId: id._id.toString()\n      }\n    })) // dynamically generating supported paths\n\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); //  this is name of collection\n  // finds documents with _id value equal to the meetupId which we have from the context.params above\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\n\nfunction MeetupDetails(props) {\n  // the page automatically receives the nested props object returned by the getStaticProps function in the same file\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    description: props.meetupData.description,\n    title: props.meetupData.title,\n    address: props.meetupData.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MeetupDetails; //vs. hardcoded\n// [\n//   {\n//     params: {\n//       meetupId: \"m1\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m2\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m3\",\n//     },\n//   },\n// ],","map":{"version":3,"sources":["/Users/kiko/Desktop/REACT COMPLETE GUIDE*******/react-nextJS-meetup-project/pages/[meetupId]/index.js"],"names":["GetStaticProps","GetStaticPaths","MeetupDetail","useRouter","MongoClient","getStaticPaths","client","connect","db","meetupsCollection","collection","meetupsIDs","find","_id","toArray","close","fallback","paths","map","id","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","props","meetupData","MeetupDetails","image","description","title","address"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,MAA/B;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMF,WAAW,CAACG,OAAZ,CACnB,iHADmB,CAC+F;AAD/F,GAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAPqC,CAQrC;AAEA;;AACA,QAAMC,UAAU,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAzB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AACY;AACjBC,IAAAA,KAAK,EAAEN,UAAU,CAACO,GAAX,CAAgBC,EAAD,KAAS;AAC7BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,EAAE,CAACN,GAAH,CAAOS,QAAP;AAAZ;AADqB,KAAT,CAAf,CAFF,CAIA;;AAJA,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMF,WAAW,CAACG,OAAZ,CACnB,iHADmB,CAC+F;AAD/F,GAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAT4C,CAU5C;AAEA;;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAC3CiB,OAD0B,CAClB;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GADkB,EAE1BP,OAF0B,EAA7B;AAIAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLY,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEH;AADP;AADF,GAAP;AAKD;;AAED,SAASI,aAAT,CAAuBF,KAAvB,EAA8B;AAC5B;AACA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBE,KAD1B;AAEE,IAAA,WAAW,EAAEH,KAAK,CAACC,UAAN,CAAiBG,WAFhC;AAGE,IAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBI,KAH1B;AAIE,IAAA,OAAO,EAAEL,KAAK,CAACC,UAAN,CAAiBK;AAJ5B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,eAAeJ,aAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { GetStaticProps } from \"next\";\nimport { GetStaticPaths } from \"next\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { useRouter } from \"next/router\";\nimport { MongoClient } from \"mongodb\";\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n  //  this is name of collection\n\n  // finds all documents from collection but just the _id field for each document\n  const meetupsIDs = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false, // means we have listed all supported paths are below.\n    paths: meetupsIDs.map((id) => ({\n      params: { meetupId: id._id.toString() },\n    })), // dynamically generating supported paths\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n  //  this is name of collection\n\n  // finds documents with _id value equal to the meetupId which we have from the context.params above\n  const selectedMeetup = await meetupsCollection\n    .findOne({ _id: meetupId })\n    .toArray();\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: selectedMeetup,\n    },\n  };\n}\n\nfunction MeetupDetails(props) {\n  // the page automatically receives the nested props object returned by the getStaticProps function in the same file\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      description={props.meetupData.description}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n    />\n  );\n}\n\nexport default MeetupDetails;\n\n//vs. hardcoded\n// [\n//   {\n//     params: {\n//       meetupId: \"m1\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m2\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m3\",\n//     },\n//   },\n// ],\n"]},"metadata":{},"sourceType":"module"}