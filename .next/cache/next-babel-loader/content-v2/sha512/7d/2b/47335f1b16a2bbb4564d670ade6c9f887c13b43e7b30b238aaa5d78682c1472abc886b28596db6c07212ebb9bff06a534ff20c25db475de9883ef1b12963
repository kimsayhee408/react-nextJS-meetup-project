{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kiko/Desktop/REACT COMPLETE GUIDE*******/react-nextJS-meetup-project/pages/[meetupId]/index.js\";\nimport { GetStaticProps } from \"next\";\nimport { GetStaticPaths } from \"next\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { useRouter } from \"next/router\";\n//MongoDB adds a ID to each document but it is not a string, it's this weird object thing.\nimport Head from \"next/head\"; // will use to to add meta tags for SEO before deployment\n\nfunction MeetupDetails(props) {\n  // the page automatically receives the nested props object returned by the getStaticProps function in the same file\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Global Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"descriptioin\",\n        content: \"Browse a huge list of meetups you can attend, all over the world!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      description: props.meetupData.description,\n      title: props.meetupData.title,\n      address: props.meetupData.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails; //vs. hardcoded\n// [\n//   {\n//     params: {\n//       meetupId: \"m1\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m2\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m3\",\n//     },\n//   },\n// ],\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/kiko/Desktop/REACT COMPLETE GUIDE*******/react-nextJS-meetup-project/pages/[meetupId]/index.js"],"names":["GetStaticProps","GetStaticPaths","MeetupDetail","useRouter","Head","MeetupDetails","props","meetupData","image","description","title","address"],"mappings":";;;AAAA,SAASA,cAAT,QAA+B,MAA/B;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACiD;AACjD,OAAOC,IAAP,MAAiB,WAAjB,C,CAA8B;;AAyD9B,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B;AACA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,cADP;AAEE,QAAA,OAAO,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,MAAA,WAAW,EAAEF,KAAK,CAACC,UAAN,CAAiBE,WAFhC;AAGE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAH1B;AAIE,MAAA,OAAO,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ5B;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAkBD;;KApBQN,a;;AAsBT,eAAeA,aAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { GetStaticProps } from \"next\";\nimport { GetStaticPaths } from \"next\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { useRouter } from \"next/router\";\nimport { MongoClient, ObjectId } from \"mongodb\"; //MongoDB adds a ID to each document but it is not a string, it's this weird object thing.\nimport Head from \"next/head\"; // will use to to add meta tags for SEO before deployment\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n  //  this is name of collection\n\n  // finds all documents from collection but just the _id field for each document\n  const meetupsIDs = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false, // means we have listed all supported paths are below.\n    paths: meetupsIDs.map((id) => ({\n      params: { meetupId: id._id.toString() },\n    })), // dynamically generating supported paths\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://sayhee:cHX2Z3egDUBh7EY8@cluster0.saffl6d.mongodb.net/ReactNextMeetups?retryWrites=true&w=majority\" // ReactNextMeetups is the name of the db I am establishing a connection to. If it doesn't exist yet, this will create a db of that name in my cluster.\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n  //  this is name of collection\n\n  // finds documents with _id value equal to the meetupId which we have from the context.params above\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId), // because MongoDb ids are these weird object things\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(), // again, need to transform the ID object into a string before we can pass it as part of this props, which our page component will receive\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\n\nfunction MeetupDetails(props) {\n  // the page automatically receives the nested props object returned by the getStaticProps function in the same file\n  return (\n    <>\n      <Head>\n        <title>React Global Meetups</title>\n        <meta\n          name=\"descriptioin\"\n          content=\"Browse a huge list of meetups you can attend, all over the world!\"\n        />\n      </Head>\n      {/* Adding head data to our home page. */}\n      <MeetupDetail\n        image={props.meetupData.image}\n        description={props.meetupData.description}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n      />\n    </>\n  );\n}\n\nexport default MeetupDetails;\n\n//vs. hardcoded\n// [\n//   {\n//     params: {\n//       meetupId: \"m1\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m2\",\n//     },\n//   },\n//   {\n//     params: {\n//       meetupId: \"m3\",\n//     },\n//   },\n// ],\n"]},"metadata":{},"sourceType":"module"}